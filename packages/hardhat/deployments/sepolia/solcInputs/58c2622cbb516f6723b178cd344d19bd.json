{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS\n    }\n\n    /**\n     * @dev The signature derives the `address(0)`.\n     */\n    error ECDSAInvalidSignature();\n\n    /**\n     * @dev The signature has an invalid length.\n     */\n    error ECDSAInvalidSignatureLength(uint256 length);\n\n    /**\n     * @dev The signature has an S value that is in the upper half order.\n     */\n    error ECDSAInvalidSignatureS(bytes32 s);\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with `signature` or an error. This will not\n     * return address(0) without also returning an error description. Errors are documented using an enum (error type)\n     * and a bytes32 providing additional information about the error.\n     *\n     * If no error is returned, then the address can be used for verification purposes.\n     *\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError, bytes32) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength, bytes32(signature.length));\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, signature);\n        _throwError(error, errorArg);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     */\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError, bytes32) {\n        unchecked {\n            bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n            // We do not check for an overflow here since the shift operation results in 0 or 1.\n            uint8 v = uint8((uint256(vs) >> 255) + 27);\n            return tryRecover(hash, v, r, s);\n        }\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     */\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, r, vs);\n        _throwError(error, errorArg);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError, bytes32) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS, s);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature, bytes32(0));\n        }\n\n        return (signer, RecoverError.NoError, bytes32(0));\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, v, r, s);\n        _throwError(error, errorArg);\n        return recovered;\n    }\n\n    /**\n     * @dev Optionally reverts with the corresponding custom error according to the `error` argument provided.\n     */\n    function _throwError(RecoverError error, bytes32 errorArg) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert ECDSAInvalidSignature();\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert ECDSAInvalidSignatureLength(uint256(errorArg));\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert ECDSAInvalidSignatureS(errorArg);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant NOT_ENTERED = 1;\n    uint256 private constant ENTERED = 2;\n\n    uint256 private _status;\n\n    /**\n     * @dev Unauthorized reentrant call.\n     */\n    error ReentrancyGuardReentrantCall();\n\n    constructor() {\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\n        if (_status == ENTERED) {\n            revert ReentrancyGuardReentrantCall();\n        }\n\n        // Any calls to nonReentrant after this point will fail\n        _status = ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == ENTERED;\n    }\n}\n"
    },
    "contracts/Faucet.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\r\nimport \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\r\n\r\ncontract Faucet is ReentrancyGuard {\r\n\tusing ECDSA for bytes32;\r\n\r\n\taddress public owner;\r\n\tuint256 public dailyLimit;\r\n\tuint256 public totalLimit;\r\n\tbool public faucetActive = true;\r\n\r\n\tmapping(address => uint256) public totalWithdrawn;\r\n\tmapping(address => uint256) public lastWithdrawTime;\r\n\tuint256 public withdrawFrequency;\r\n\tmapping(address => bool) public whitelist;\r\n\r\n\t// Events for logging actions in the contract\r\n\tevent WhitelistUpdated(address indexed _address, bool _status);\r\n\tevent Withdrawal(address indexed _user, uint256 _amount);\r\n\tevent WithdrawAll(address indexed _relayer, uint256 _balance);\r\n\tevent OwnershipTransferred(\r\n\t\taddress indexed previousOwner,\r\n\t\taddress indexed newOwner\r\n\t);\r\n\tevent FaucetStatusUpdated(bool active);\r\n\r\n\t// Modifier to restrict access to the owner only\r\n\tmodifier onlyOwner() {\r\n\t\trequire(msg.sender == owner, \"No eres el propietario\");\r\n\t\t_;\r\n\t}\r\n\r\n\t// Modifier to restrict access to whitelisted addresses only\r\n\tmodifier onlyWhitelisted() {\r\n\t\trequire(whitelist[msg.sender], \"Address no esta en lista blanca\");\r\n\t\t_;\r\n\t}\r\n\r\n\t// Modifier to check if the faucet is active\r\n\tmodifier faucetIsActive() {\r\n\t\trequire(faucetActive, \"El faucet se encuentra inactivo\");\r\n\t\t_;\r\n\t}\r\n\r\n\t// Constructor to set the contract deployer as the owner\r\n\tconstructor() payable {\r\n\t\tdailyLimit = 0.1 ether;\r\n\t\ttotalLimit = 1 ether;\r\n\t\twithdrawFrequency = 24 hours;\r\n\t\towner = msg.sender;\r\n\t\twhitelist[owner] = true;\r\n\t\temit WhitelistUpdated(owner, true);\r\n\t}\r\n\r\n\t// Function to add an address to the whitelist, only callable by the owner\r\n\tfunction addToWhitelist(address _address) external onlyOwner {\r\n\t\twhitelist[_address] = true;\r\n\t\temit WhitelistUpdated(_address, true);\r\n\t}\r\n\r\n\t// Function to remove an address from the whitelist, only callable by the owner\r\n\tfunction removeFromWhitelist(address _address) external onlyOwner {\r\n\t\twhitelist[_address] = false;\r\n\t\temit WhitelistUpdated(_address, false);\r\n\t}\r\n\r\n\t// Function to deposit ETH into the contract, only callable by the owner\r\n\tfunction deposit() external payable onlyOwner {}\r\n\r\n\t// Function to allow a third party (relayer) to request withdrawal on behalf of a user\r\n\tfunction requestWithdraw(\r\n\t\taddress _user,\r\n\t\tuint256 _amount\r\n\t) external onlyWhitelisted nonReentrant faucetIsActive {\r\n\t\trequire(_amount <= dailyLimit, \"Ha excedido el monto diario\");\r\n\t\trequire(\r\n\t\t\ttotalWithdrawn[_user] + _amount <= totalLimit,\r\n\t\t\t\"Ha excedido el limite total\"\r\n\t\t);\r\n\t\trequire(\r\n\t\t\tblock.timestamp - lastWithdrawTime[_user] >= withdrawFrequency,\r\n\t\t\t\"Retiros solo permitidos en base al limite diario\"\r\n\t\t);\r\n\t\trequire(\r\n\t\t\taddress(this).balance >= _amount,\r\n\t\t\t\"No hay fondos suficientes en el faucet\"\r\n\t\t);\r\n\r\n\t\ttotalWithdrawn[_user] += _amount;\r\n\t\tlastWithdrawTime[_user] = block.timestamp;\r\n\r\n\t\t// Transfer ETH to the user\r\n\t\t(bool success, ) = _user.call{ value: _amount }(\"\");\r\n\t\trequire(success, \"Transferencia fallida\");\r\n\r\n\t\temit Withdrawal(_user, _amount);\r\n\t}\r\n\r\n\t// Function to allow whitelisted addresses to withdraw the entire balance of the faucet\r\n\tfunction withdrawAll()\r\n\t\texternal\r\n\t\tonlyWhitelisted\r\n\t\tnonReentrant\r\n\t\tfaucetIsActive\r\n\t{\r\n\t\tuint256 balance = address(this).balance;\r\n\t\trequire(balance > 0, \"No hay fondos para retirar\");\r\n\r\n\t\t// Transfer entire balance to the contract owner\r\n\t\t(bool success, ) = owner.call{ value: balance }(\"\");\r\n\t\trequire(success, \"Transferencia fallida\");\r\n\r\n\t\temit WithdrawAll(msg.sender, balance);\r\n\t}\r\n\r\n\t// Function to transfer ownership of the contract to a new owner\r\n\tfunction transferOwnership(address newOwner) external onlyOwner {\r\n\t\trequire(\r\n\t\t\tnewOwner != address(0),\r\n\t\t\t\"Nuevo propietario no puede ser address 0\"\r\n\t\t);\r\n\t\temit OwnershipTransferred(owner, newOwner);\r\n\t\towner = newOwner;\r\n\t}\r\n\r\n\t// Function to update daily limit, only callable by the owner\r\n\tfunction updateDailyLimit(uint256 _newLimit) external onlyOwner {\r\n\t\tdailyLimit = _newLimit;\r\n\t}\r\n\r\n\t// Function to update total limit, only callable by the owner\r\n\tfunction updateTotalLimit(uint256 _newLimit) external onlyOwner {\r\n\t\ttotalLimit = _newLimit;\r\n\t}\r\n\r\n\t// Function to update withdraw frequency, only callable by the owner\r\n\tfunction updateWithdrawFrequency(uint256 _newFrequency) external onlyOwner {\r\n\t\twithdrawFrequency = _newFrequency;\r\n\t}\r\n\r\n\t// Function to activate or deactivate the faucet, only callable by the owner\r\n\tfunction toggleFaucetStatus() external onlyOwner {\r\n\t\tfaucetActive = !faucetActive;\r\n\t\temit FaucetStatusUpdated(faucetActive);\r\n\t}\r\n\r\n\t// Function to get the current balance of the contract\r\n\tfunction getBalance() external view returns (uint256) {\r\n\t\treturn address(this).balance;\r\n\t}\r\n\r\n\t// Fallback function to receive ETH directly\r\n\treceive() external payable {}\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}